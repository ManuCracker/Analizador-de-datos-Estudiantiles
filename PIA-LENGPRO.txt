<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Analizador de Datos Estudiantiles</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <style>
    :root {
      --primary-color: #b71c1c;
      --secondary-color: #ff4d4d;
      --bg-color: #121212;
      --card-color: #1e1e1e;
      --text-color: #e0e0e0;
      --border-color: #444;
      --success-color: #4caf50;
      --error-color: #f44336;
      --warning-color: #ff9800;
    }

    * {
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Arial, sans-serif;
      background-color: var(--bg-color);
      color: var(--text-color);
      margin: 0;
      padding: 20px;
      line-height: 1.6;
    }

    .container {
      max-width: 1600px;
      margin: 20px auto;
      background-color: var(--card-color);
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 0 20px rgba(255, 0, 0, 0.3);
    }

    h1 {
      text-align: center;
      font-size: 2.5rem;
      margin-bottom: 30px;
      color: var(--secondary-color);
    }

    .file-upload {
      text-align: center;
      margin-bottom: 30px;
      padding: 20px;
      border: 2px dashed var(--border-color);
      border-radius: 8px;
    }

    .file-upload label {
      display: inline-block;
      padding: 12px 24px;
      background-color: var(--primary-color);
      color: white;
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .file-upload label:hover {
      background-color: var(--secondary-color);
      transform: translateY(-2px);
    }

    .file-upload input[type="file"] {
      display: none;
    }

    .stats-container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 30px;
      justify-content: center;
    }

    .stat-card {
      background-color: #2c2c2c;
      padding: 15px 20px;
      border-radius: 8px;
      min-width: 200px;
      text-align: center;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .stat-card h3 {
      margin-top: 0;
      color: var(--secondary-color);
    }

    .stat-card p {
      font-size: 1.5rem;
      margin-bottom: 0;
    }

    .filters {
      margin-top: 30px;
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 20px;
      align-items: end;
    }

    .filter-group {
      display: flex;
      flex-direction: column;
    }

    .filter-group label {
      margin-bottom: 8px;
      font-weight: bold;
    }

    .button-group {
      display: flex;
      gap: 15px;
      margin-top: 30px;
      flex-wrap: wrap;
      justify-content: center;
    }

    button {
      background-color: var(--primary-color);
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 1rem;
      transition: all 0.3s ease;
      min-width: 150px;
    }

    button:hover {
      background-color: var(--secondary-color);
      transform: translateY(-2px);
    }

    button.secondary {
      background-color: #424242;
    }

    button.secondary:hover {
      background-color: #616161;
    }

    input, select {
      background-color: #2c2c2c;
      color: var(--text-color);
      border: 1px solid var(--border-color);
      border-radius: 6px;
      padding: 10px 15px;
      font-size: 1rem;
      width: 100%;
    }

    input:focus, select:focus {
      outline: none;
      border-color: var(--secondary-color);
      box-shadow: 0 0 0 2px rgba(255, 77, 77, 0.2);
    }

    .table-container {
      overflow-x: auto;
      margin-top: 30px;
      border-radius: 8px;
      background-color: #2c2c2c;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      min-width: 800px;
    }

    th, td {
      border: 1px solid var(--border-color);
      padding: 12px 15px;
      text-align: left;
    }

    th {
      background-color: var(--primary-color);
      color: white;
      position: sticky;
      top: 0;
    }

    tr:nth-child(even) {
      background-color: #333;
    }

    tr:hover {
      background-color: #444;
    }

    .chart-container {
      margin-top: 50px;
      position: relative;
      height: 500px;
      background-color: #2c2c2c;
      border-radius: 12px;
      padding: 20px;
    }

    canvas {
      width: 100% !important;
      height: 100% !important;
    }

    .tab-container {
      margin-top: 30px;
    }

    .tabs {
      display: flex;
      border-bottom: 1px solid var(--border-color);
      margin-bottom: 20px;
    }

    .tab {
      padding: 10px 20px;
      cursor: pointer;
      border-bottom: 3px solid transparent;
      transition: all 0.3s ease;
    }

    .tab.active {
      border-bottom: 3px solid var(--secondary-color);
      color: var(--secondary-color);
      font-weight: bold;
    }

    .tab:hover:not(.active) {
      border-bottom: 3px solid #888;
    }

    .tab-content {
      display: none;
    }

    .tab-content.active {
      display: block;
    }

    .loader {
      display: none;
      border: 5px solid #f3f3f3;
      border-top: 5px solid var(--primary-color);
      border-radius: 50%;
      width: 50px;
      height: 50px;
      animation: spin 1s linear infinite;
      margin: 30px auto;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 15px 25px;
      border-radius: 6px;
      color: white;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      transform: translateX(200%);
      transition: transform 0.3s ease;
      z-index: 1000;
    }

    .notification.show {
      transform: translateX(0);
    }

    .notification.success {
      background-color: var(--success-color);
    }

    .notification.error {
      background-color: var(--error-color);
    }

    .notification.warning {
      background-color: var(--warning-color);
    }

    @media (max-width: 768px) {
      .container {
        padding: 20px;
      }

      h1 {
        font-size: 2rem;
      }

      .filters {
        grid-template-columns: 1fr;
      }

      .button-group {
        flex-direction: column;
      }

      button {
        width: 100%;
      }

      .chart-container {
        height: 300px;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Analizador de Datos Estudiantiles</h1>
    
    <div class="file-upload">
      <label for="fileInput">Seleccionar archivo Excel</label>
      <input type="file" id="fileInput" accept=".xlsx,.xls">
      <p id="fileName" style="margin-top: 10px;"></p>
    </div>

    <div id="loader" class="loader"></div>

    <div id="statsContainer" class="stats-container" style="display: none;">
      <div class="stat-card">
        <h3>Total Estudiantes</h3>
        <p id="totalStudents">0</p>
      </div>
      <div class="stat-card">
        <h3>Promedio General</h3>
        <p id="avgScore">0</p>
      </div>
      <div class="stat-card">
        <h3>Mejor Promedio</h3>
        <p id="topScore">0</p>
      </div>
      <div class="stat-card">
        <h3>Carreras</h3>
        <p id="totalCareers">0</p>
      </div>
    </div>

    <div class="filters">
      <div class="filter-group">
        <label for="filterSurname">Apellido contiene:</label>
        <input type="text" id="filterSurname" placeholder="Buscar por apellido">
      </div>
      <div class="filter-group">
        <label for="filterCarrera">Carrera:</label>
        <select id="filterCarrera">
          <option value="">Todas las carreras</option>
        </select>
      </div>
      <div class="filter-group">
        <label for="filterAFMin">Calificación mínima:</label>
        <input type="number" id="filterAFMin" min="0" max="100" placeholder="0">
      </div>
      <div class="filter-group">
        <label for="filterAFMax">Calificación máxima:</label>
        <input type="number" id="filterAFMax" min="0" max="100" placeholder="100">
      </div>
    </div>

    <div class="button-group">
      <button onclick="applyFilter()">Aplicar Filtros</button>
      <button onclick="resetFilters()" class="secondary">Restablecer Filtros</button>
      <button onclick="exportTableToCSV()">Exportar a CSV</button>
      <button onclick="exportChartToImage()">Exportar Gráfico</button>
    </div>

    <div class="table-container">
      <table id="dataTable">
        <thead></thead>
        <tbody></tbody>
      </table>
    </div>

    <div class="tab-container">
      <div class="tabs">
        <div class="tab active" onclick="changeTab('promedio')">Promedio AFs</div>
        <div class="tab" onclick="changeTab('carreras')">Distribución por Carrera</div>
        <div class="tab" onclick="changeTab('histograma')">Histograma de Calificaciones</div>
      </div>

      <div id="promedio" class="tab-content active">
        <div class="chart-container">
          <canvas id="barChart"></canvas>
        </div>
      </div>

      <div id="carreras" class="tab-content">
        <div class="chart-container">
          <canvas id="pieChart"></canvas>
        </div>
      </div>

      <div id="histograma" class="tab-content">
        <div class="chart-container">
          <canvas id="histogramChart"></canvas>
        </div>
      </div>
    </div>
  </div>

  <div id="notification" class="notification"></div>

  <script>
    // Variables globales
    let rawData = [];
    let filteredData = [];
    let charts = {
      bar: null,
      pie: null,
      histogram: null
    };
    let currentTab = 'promedio';

    // Inicialización
    document.addEventListener('DOMContentLoaded', function() {
      document.getElementById('fileInput').addEventListener('change', handleFileUpload);
      setupEventListeners();
    });

    function setupEventListeners() {
      // Aplicar filtros al presionar Enter
      document.getElementById('filterSurname').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') applyFilter();
      });
      
      document.getElementById('filterAFMin').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') applyFilter();
      });
      
      document.getElementById('filterAFMax').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') applyFilter();
      });
    }

    async function handleFileUpload(event) {
      const file = event.target.files[0];
      if (!file) return;

      showLoader();
      document.getElementById('fileName').textContent = `Archivo seleccionado: ${file.name}`;

      try {
        const data = await readFileAsArrayBuffer(file);
        const workbook = XLSX.read(data, { type: 'array' });
        
        if (!workbook.SheetNames.length) {
          throw new Error('El archivo no contiene hojas');
        }
        
        const firstSheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[firstSheetName];
        const json = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

        if (json.length < 2) {
          throw new Error('El archivo no contiene datos suficientes');
        }

        processData(json);
        showNotification('Archivo cargado correctamente', 'success');
      } catch (error) {
        console.error('Error al procesar el archivo:', error);
        showNotification(`Error: ${error.message}`, 'error');
      } finally {
        hideLoader();
      }
    }

    function readFileAsArrayBuffer(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => resolve(e.target.result);
        reader.onerror = (e) => reject(new Error('Error al leer el archivo'));
        reader.readAsArrayBuffer(file);
      });
    }

    function processData(json) {
      const headers = json[0].map(h => h.trim());
      rawData = json.slice(1).map(row => {
        const obj = {};
        headers.forEach((h, i) => obj[h] = row[i] !== undefined ? row[i] : '');
        
        // Crear campo combinado de nombre completo
        obj['Alumno'] = `${obj['Nombre'] || ''} ${obj['Apellidos'] || ''}`.trim();
        
        // Calcular promedio si hay campos de calificación
        const afFields = headers.filter(h => h.startsWith('AF'));
        if (afFields.length) {
          const scores = afFields.map(f => parseFloat(obj[f]) || 0);
          obj['Promedio'] = scores.reduce((a, b) => a + b, 0) / scores.length;
        }
        
        return obj;
      });

      filteredData = [...rawData];
      updateUI();
    }

    function updateUI() {
      displayData(filteredData);
      updateStats();
      renderCharts();
      populateCareerFilter();
      document.getElementById('statsContainer').style.display = 'flex';
    }

    function displayData(data) {
      const table = document.getElementById('dataTable');
      if (!data.length) {
        table.querySelector('thead').innerHTML = '<tr><th colspan="100%">No hay datos para mostrar</th></tr>';
        table.querySelector('tbody').innerHTML = '';
        return;
      }

      const headers = Object.keys(data[0]);
      table.querySelector('thead').innerHTML = '<tr>' + 
        headers.map(h => `<th>${h}</th>`).join('') + 
        '</tr>';
      
      table.querySelector('tbody').innerHTML = data.map(row => 
        `<tr>${headers.map(h => `<td>${formatCellValue(row[h])}</td>`).join('')}</tr>`
      ).join('');
    }

    function formatCellValue(value) {
      if (typeof value === 'number') {
        // Formatear números con 2 decimales si son floats
        return value % 1 === 0 ? value : value.toFixed(2);
      }
      return value !== null && value !== undefined ? value : '';
    }

    function updateStats() {
      if (!filteredData.length) return;

      // Total estudiantes
      document.getElementById('totalStudents').textContent = filteredData.length;

      // Promedio general
      const avg = filteredData.reduce((sum, row) => sum + (row['Promedio'] || 0), 0) / filteredData.length;
      document.getElementById('avgScore').textContent = avg.toFixed(2);

      // Mejor promedio
      const top = Math.max(...filteredData.map(row => row['Promedio'] || 0));
      document.getElementById('topScore').textContent = top.toFixed(2);

      // Carreras únicas
      const careers = new Set(filteredData.map(row => row['Carrera']).filter(Boolean));
      document.getElementById('totalCareers').textContent = careers.size;
    }

    function populateCareerFilter() {
      const careerSelect = document.getElementById('filterCarrera');
      careerSelect.innerHTML = '<option value="">Todas las carreras</option>';
      
      if (!rawData.length) return;

      const careers = [...new Set(rawData.map(row => row['Carrera']).filter(Boolean))];
      careers.forEach(career => {
        const option = document.createElement('option');
        option.value = career;
        option.textContent = career;
        careerSelect.appendChild(option);
      });
    }

    function applyFilter() {
      const surnameInput = document.getElementById('filterSurname').value.toUpperCase();
      const careerInput = document.getElementById('filterCarrera').value.toUpperCase();
      const minAF = parseFloat(document.getElementById('filterAFMin').value) || 0;
      const maxAF = parseFloat(document.getElementById('filterAFMax').value) || 100;

      filteredData = rawData.filter(row => {
        const apellido = (row['Apellidos'] || '').toUpperCase();
        const carrera = (row['Carrera'] || '').toUpperCase();
        const promedio = row['Promedio'] || 0;
        
        return apellido.includes(surnameInput) && 
               (careerInput === '' || carrera.includes(careerInput)) && 
               promedio >= minAF && 
               promedio <= maxAF;
      });

      updateUI();
      showNotification(`Filtros aplicados: ${filteredData.length} registros encontrados`, 'success');
    }

    function resetFilters() {
      document.getElementById('filterSurname').value = '';
      document.getElementById('filterCarrera').value = '';
      document.getElementById('filterAFMin').value = '';
      document.getElementById('filterAFMax').value = '';
      
      filteredData = [...rawData];
      updateUI();
      showNotification('Filtros restablecidos', 'success');
    }

    function renderCharts() {
      renderBarChart();
      renderPieChart();
      renderHistogramChart();
    }

    function renderBarChart() {
      const ctx = document.getElementById('barChart').getContext('2d');
      
      if (charts.bar) {
        charts.bar.destroy();
      }
      
      if (!filteredData.length) return;

      const labels = filteredData.map(row => row['Alumno']);
      const avgScores = filteredData.map(row => row['Promedio'] || 0);

      charts.bar = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Promedio AFs',
            data: avgScores,
            backgroundColor: 'rgba(183, 28, 28, 0.6)',
            borderColor: 'rgba(183, 28, 28, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: { 
              display: true, 
              text: 'Promedio de Actividades Fundamentales por Estudiante', 
              color: '#e0e0e0', 
              font: { size: 16 } 
            },
            legend: { 
              labels: { 
                color: '#e0e0e0',
                boxWidth: 20,
                padding: 20
              } 
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  return `Promedio: ${context.raw.toFixed(2)}`;
                }
              }
            }
          },
          scales: {
            x: { 
              ticks: { 
                color: '#e0e0e0',
                maxRotation: 45,
                minRotation: 45
              },
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              }
            },
            y: {
              beginAtZero: true,
              max: 100,
              ticks: { 
                color: '#e0e0e0',
                callback: function(value) {
                  return value % 20 === 0 ? value : '';
                }
              },
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              }
            }
          }
        }
      });
    }

    function renderPieChart() {
      const ctx = document.getElementById('pieChart').getContext('2d');
      
      if (charts.pie) {
        charts.pie.destroy();
      }
      
      if (!filteredData.length) return;

      // Agrupar por carrera
      const careerCounts = filteredData.reduce((acc, row) => {
        const career = row['Carrera'] || 'Sin especificar';
        acc[career] = (acc[career] || 0) + 1;
        return acc;
      }, {});

      const labels = Object.keys(careerCounts);
      const data = Object.values(careerCounts);

      // Generar colores dinámicamente
      const backgroundColors = labels.map((_, i) => {
        const hue = (i * 137.508) % 360; // Golden angle approximation
        return `hsla(${hue}, 70%, 50%, 0.7)`;
      });

      charts.pie = new Chart(ctx, {
        type: 'pie',
        data: {
          labels: labels,
          datasets: [{
            data: data,
            backgroundColor: backgroundColors,
            borderColor: '#2c2c2c',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: { 
              display: true, 
              text: 'Distribución de Estudiantes por Carrera', 
              color: '#e0e0e0', 
              font: { size: 16 } 
            },
            legend: { 
              position: 'right',
              labels: { 
                color: '#e0e0e0',
                boxWidth: 20,
                padding: 20
              } 
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  const label = context.label || '';
                  const value = context.raw || 0;
                  const total = context.dataset.data.reduce((a, b) => a + b, 0);
                  const percentage = Math.round((value / total) * 100);
                  return `${label}: ${value} (${percentage}%)`;
                }
              }
            }
          }
        }
      });
    }

    function renderHistogramChart() {
      const ctx = document.getElementById('histogramChart').getContext('2d');
      
      if (charts.histogram) {
        charts.histogram.destroy();
      }
      
      if (!filteredData.length) return;

      // Obtener todos los promedios
      const averages = filteredData.map(row => row['Promedio'] || 0);
      
      // Configurar bins para el histograma
      const binSize = 10;
      const binCount = Math.ceil(100 / binSize);
      const bins = Array(binCount).fill(0);
      
      averages.forEach(avg => {
        const binIndex = Math.min(Math.floor(avg / binSize), binCount - 1);
        bins[binIndex]++;
      });

      const labels = Array.from({ length: binCount }, (_, i) => {
        const start = i * binSize;
        const end = start + binSize;
        return `${start}-${end}`;
      });

      charts.histogram = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Número de Estudiantes',
            data: bins,
            backgroundColor: 'rgba(76, 175, 80, 0.6)',
            borderColor: 'rgba(76, 175, 80, 1)',
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            title: { 
              display: true, 
              text: 'Distribución de Promedios', 
              color: '#e0e0e0', 
              font: { size: 16 } 
            },
            legend: { 
              labels: { 
                color: '#e0e0e0',
                boxWidth: 20,
                padding: 20
              } 
            }
          },
          scales: {
            x: { 
              title: {
                display: true,
                text: 'Rango de Promedios',
                color: '#e0e0e0'
              },
              ticks: { 
                color: '#e0e0e0'
              },
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              }
            },
            y: {
              title: {
                display: true,
                text: 'Número de Estudiantes',
                color: '#e0e0e0'
              },
              beginAtZero: true,
              ticks: { 
                color: '#e0e0e0',
                stepSize: 1
              },
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              }
            }
          }
        }
      });
    }

    function changeTab(tabId) {
      // Ocultar todas las pestañas y desactivar todos los botones
      document.querySelectorAll('.tab-content').forEach(content => {
        content.classList.remove('active');
      });
      document.querySelectorAll('.tab').forEach(tab => {
        tab.classList.remove('active');
      });
      
      // Mostrar la pestaña seleccionada y activar su botón
      document.getElementById(tabId).classList.add('active');
      document.querySelector(`.tab[onclick="changeTab('${tabId}')"]`).classList.add('active');
      
      currentTab = tabId;
    }

    function exportTableToCSV() {
      if (!filteredData.length) {
        showNotification('No hay datos para exportar', 'warning');
        return;
      }

      const headers = Object.keys(filteredData[0]);
      const csvRows = [
        headers.join(','),
        ...filteredData.map(row => 
          headers.map(fieldName => 
            `"${(row[fieldName] !== null && row[fieldName] !== undefined ? row[fieldName].toString().replace(/"/g, '""') : '')}"`
          ).join(',')
        )
      ];

      const csvContent = csvRows.join('\n');
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      
      link.href = url;
      link.download = 'datos_estudiantiles.csv';
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      showNotification('Tabla exportada a CSV correctamente', 'success');
    }

    function exportChartToImage() {
      let canvas;
      switch(currentTab) {
        case 'promedio':
          canvas = document.getElementById('barChart');
          break;
        case 'carreras':
          canvas = document.getElementById('pieChart');
          break;
        case 'histograma':
          canvas = document.getElementById('histogramChart');
          break;
        default:
          canvas = document.getElementById('barChart');
      }

      if (!canvas) {
        showNotification('No hay gráfico para exportar', 'warning');
        return;
      }

      const link = document.createElement('a');
      link.download = `grafico_${currentTab}.png`;
      link.href = canvas.toDataURL('image/png');
      link.click();
      
      showNotification('Gráfico exportado como imagen', 'success');
    }

    function showLoader() {
      document.getElementById('loader').style.display = 'block';
    }

    function hideLoader() {
      document.getElementById('loader').style.display = 'none';
    }

    function showNotification(message, type) {
      const notification = document.getElementById('notification');
      notification.textContent = message;
      notification.className = `notification ${type} show`;
      
      setTimeout(() => {
        notification.classList.remove('show');
      }, 5000);
    }
  </script>
</body>
</html>